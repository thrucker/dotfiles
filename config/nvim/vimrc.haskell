" Hoogle {{{

" Hoogle the word under the cursor
nnoremap <silent> <leader>hh :Hoogle<cr>

" Hoogle and prompt for input
nnoremap <silent> <leader>hH :Hoogle

" Hoogle for detailed documentation (e.g "Functor")
nnoremap <silent> <leader>hi :HoogleInfo<cr>

" Hoogle for detailed documentation and prompt for input
nnoremap <silent> <leader>hI :HoogleInfo

" Hoogle, close the Hoogle window
nnoremap <silent> <leader>hz :HoogleClose<cr>

" }}}

" Formatting {{{

" Use hindent instead of par for haskell buffers
autocmd FileType haskell let &formatprg="hindent --tab-size=2 -XQuasiQuotes"

" Delete trailing white space on save
augroup whitespace
  autocmd!
  autocmd BufWrite *.hs :call DeleteTrailingWS()
augroup END

" }}}

" Completion, Syntax check, Lint & Refactor {{{

augroup haskell
  autocmd!
  autocmd FileType haskell let g:haskellmode_completion_ghc = 1
  autocmd FileType haskell map <silent> <leader><jpace> :noh<cr>:GhcModTypeClear<cr>
  autocmd FileType haskell setlocal omnifunc=necoghc#omnifunc
augroup END

if has("gui_running")
  imap <c-space> <c-r>=SuperTabAlternateCompletion("\<lt>c-x>\<lt>c-o>")<cr>
else
  if has("unix")
    inoremap <Nul> <c-r>=SuperTabAlternateCompletion("\<lt>c-x>\<lt>c-o>")<cr>
  endif
endif

noremap <silent> <leader>ht :GhcModType<CR>
noremap <silent> <leader>hT :GhcModTypeInsert<CR>

nnoremap <silent> <leader>i :silent update <bar> HsimportSymbol<CR>

" Disable hlint-refactor-vim's default keybindings
let g:hlintRefactor#disableDefaultKeybindings = 1

" hlint-refactor-vim keybindings
noremap <silent> <leader>hr :call ApplyOneSuggestion()<cr>
noremap <silent> <leader>hR :call ApplyAllSuggestions()<cr>

" open the neomake error window automatically when an error is found
" let g:neomake_open_list = 2

" options for Haskell syntax check
let g:neomake_haskell_ghc_mod_args = '-g-Wall'

" Resolve ghcmod base directory
au FileType haskell let g:ghcmod_use_basedir = getcwd()

" }}}

let g:loaded_syntastic_haskell_hdevtools_checker=1
